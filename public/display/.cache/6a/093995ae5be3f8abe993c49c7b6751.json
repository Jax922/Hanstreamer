{"id":"node_modules/@tensorflow-models/body-segmentation/body_pix/impl/multi_person/decode_multiple_masks_cpu.js","dependencies":[{"name":"/Users/shedong/Documents/dev/display/node_modules/@tensorflow-models/body-segmentation/body_pix/impl/multi_person/decode_multiple_masks_cpu.js.map","includedInParent":true,"mtime":1701372084166},{"name":"/Users/shedong/Documents/dev/display/package.json","includedInParent":true,"mtime":1701373985473},{"name":"/Users/shedong/Documents/dev/display/.babelrc","includedInParent":true,"mtime":1701372126384},{"name":"../keypoints","loc":{"line":20,"column":26},"parent":"/Users/shedong/Documents/dev/display/node_modules/@tensorflow-models/body-segmentation/body_pix/impl/multi_person/decode_multiple_masks_cpu.js","resolved":"/Users/shedong/Documents/dev/display/node_modules/@tensorflow-models/body-segmentation/body_pix/impl/keypoints.js"},{"name":"./util","loc":{"line":21,"column":21},"parent":"/Users/shedong/Documents/dev/display/node_modules/@tensorflow-models/body-segmentation/body_pix/impl/multi_person/decode_multiple_masks_cpu.js","resolved":"/Users/shedong/Documents/dev/display/node_modules/@tensorflow-models/body-segmentation/body_pix/impl/multi_person/util.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeMultiplePartMasksCPU = exports.decodeMultipleMasksCPU = void 0;\nvar keypoints_1 = require(\"../keypoints\");\nvar util_1 = require(\"./util\");\nfunction computeDistance(embedding, pose, minPartScore) {\n    if (minPartScore === void 0) { minPartScore = 0.3; }\n    var distance = 0.0;\n    var numKpt = 0;\n    for (var p = 0; p < embedding.length; p++) {\n        if (pose.keypoints[p].score > minPartScore) {\n            numKpt += 1;\n            distance += Math.pow((embedding[p].x - pose.keypoints[p].position.x), 2) +\n                Math.pow((embedding[p].y - pose.keypoints[p].position.y), 2);\n        }\n    }\n    if (numKpt === 0) {\n        distance = Infinity;\n    }\n    else {\n        distance = distance / numKpt;\n    }\n    return distance;\n}\nfunction convertToPositionInOuput(position, _a, _b, stride) {\n    var padT = _a[0], padL = _a[1];\n    var scaleX = _b[0], scaleY = _b[1];\n    var y = Math.round(((padT + position.y + 1.0) * scaleY - 1.0) / stride);\n    var x = Math.round(((padL + position.x + 1.0) * scaleX - 1.0) / stride);\n    return { x: x, y: y };\n}\nfunction getEmbedding(location, keypointIndex, convertToPosition, outputResolutionX, longOffsets, refineSteps, _a) {\n    var height = _a[0], width = _a[1];\n    var newLocation = convertToPosition(location);\n    var nn = newLocation.y * outputResolutionX + newLocation.x;\n    var dy = longOffsets[keypoints_1.NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n    var dx = longOffsets[keypoints_1.NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n    var y = location.y + dy;\n    var x = location.x + dx;\n    for (var t = 0; t < refineSteps; t++) {\n        y = Math.min(y, height - 1);\n        x = Math.min(x, width - 1);\n        var newPos = convertToPosition({ x: x, y: y });\n        var nn_1 = newPos.y * outputResolutionX + newPos.x;\n        dy = longOffsets[keypoints_1.NUM_KEYPOINTS * (2 * nn_1) + keypointIndex];\n        dx = longOffsets[keypoints_1.NUM_KEYPOINTS * (2 * nn_1 + 1) + keypointIndex];\n        y = y + dy;\n        x = x + dx;\n    }\n    return { x: x, y: y };\n}\nfunction matchEmbeddingToInstance(location, longOffsets, poses, numKptForMatching, _a, _b, outputResolutionX, _c, stride, refineSteps) {\n    var padT = _a[0], padL = _a[1];\n    var scaleX = _b[0], scaleY = _b[1];\n    var height = _c[0], width = _c[1];\n    var embed = [];\n    var convertToPosition = function (pair) {\n        return convertToPositionInOuput(pair, [padT, padL], [scaleX, scaleY], stride);\n    };\n    for (var keypointsIndex = 0; keypointsIndex < numKptForMatching; keypointsIndex++) {\n        var embedding = getEmbedding(location, keypointsIndex, convertToPosition, outputResolutionX, longOffsets, refineSteps, [height, width]);\n        embed.push(embedding);\n    }\n    var kMin = -1;\n    var kMinDist = Infinity;\n    for (var k = 0; k < poses.length; k++) {\n        var dist = computeDistance(embed, poses[k]);\n        if (dist < kMinDist) {\n            kMin = k;\n            kMinDist = dist;\n        }\n    }\n    return kMin;\n}\nfunction getOutputResolution(_a, stride) {\n    var inputResolutionY = _a[0], inputResolutionX = _a[1];\n    var outputResolutionX = Math.round((inputResolutionX - 1.0) / stride + 1.0);\n    var outputResolutionY = Math.round((inputResolutionY - 1.0) / stride + 1.0);\n    return [outputResolutionX, outputResolutionY];\n}\nfunction decodeMultipleMasksCPU(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, numKptForMatching) {\n    var inHeight = _a[0], inWidth = _a[1];\n    if (numKptForMatching === void 0) { numKptForMatching = 5; }\n    var dataArrays = posesAboveScore.map(function (x) { return new Uint8Array(height * width).fill(0); });\n    var padT = padding.top, padL = padding.left;\n    var _b = (0, util_1.getScale)([height, width], [inHeight, inWidth], padding), scaleX = _b[0], scaleY = _b[1];\n    var outputResolutionX = getOutputResolution([inHeight, inWidth], stride)[0];\n    for (var i = 0; i < height; i += 1) {\n        for (var j = 0; j < width; j += 1) {\n            var n = i * width + j;\n            var prob = segmentation[n];\n            if (prob === 1) {\n                var kMin = matchEmbeddingToInstance({ x: j, y: i }, longOffsets, posesAboveScore, numKptForMatching, [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width], stride, refineSteps);\n                if (kMin >= 0) {\n                    dataArrays[kMin][n] = 1;\n                }\n            }\n        }\n    }\n    return dataArrays;\n}\nexports.decodeMultipleMasksCPU = decodeMultipleMasksCPU;\nfunction decodeMultiplePartMasksCPU(segmentation, longOffsets, partSegmentaion, posesAboveScore, height, width, stride, _a, padding, refineSteps, numKptForMatching) {\n    var inHeight = _a[0], inWidth = _a[1];\n    if (numKptForMatching === void 0) { numKptForMatching = 5; }\n    var dataArrays = posesAboveScore.map(function (x) { return new Int32Array(height * width).fill(-1); });\n    var padT = padding.top, padL = padding.left;\n    var _b = (0, util_1.getScale)([height, width], [inHeight, inWidth], padding), scaleX = _b[0], scaleY = _b[1];\n    var outputResolutionX = getOutputResolution([inHeight, inWidth], stride)[0];\n    for (var i = 0; i < height; i += 1) {\n        for (var j = 0; j < width; j += 1) {\n            var n = i * width + j;\n            var prob = segmentation[n];\n            if (prob === 1) {\n                var kMin = matchEmbeddingToInstance({ x: j, y: i }, longOffsets, posesAboveScore, numKptForMatching, [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width], stride, refineSteps);\n                if (kMin >= 0) {\n                    dataArrays[kMin][n] = partSegmentaion[n];\n                }\n            }\n        }\n    }\n    return dataArrays;\n}\nexports.decodeMultiplePartMasksCPU = decodeMultiplePartMasksCPU;\n"},"sourceMaps":{"js":{"version":3,"file":"decode_multiple_masks_cpu.js","sourceRoot":"","sources":["../../../../src/body_pix/impl/multi_person/decode_multiple_masks_cpu.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"e678e4269913ae1ca70be8f877901f5a","cacheData":{"env":{}}}