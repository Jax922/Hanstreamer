{"id":"node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","dependencies":[{"name":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js.map","includedInParent":true,"mtime":1701372084293},{"name":"/Users/shedong/Documents/dev/Hanstreamer/public/display/package.json","includedInParent":true,"mtime":1701375952532},{"name":"/Users/shedong/Documents/dev/Hanstreamer/public/display/.babelrc","includedInParent":true,"mtime":1701372126384},{"name":"@tensorflow/tfjs-converter","loc":{"line":56,"column":21},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow/tfjs-converter/dist/index.js"},{"name":"@tensorflow/tfjs-core","loc":{"line":57,"column":17},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../shared/calculators/convert_image_to_tensor","loc":{"line":58,"column":40},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/shared/calculators/convert_image_to_tensor.js"},{"name":"../shared/calculators/image_utils","loc":{"line":59,"column":28},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/shared/calculators/image_utils.js"},{"name":"../shared/calculators/mask_util","loc":{"line":60,"column":26},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/shared/calculators/mask_util.js"},{"name":"../shared/calculators/tensors_to_segmentation","loc":{"line":61,"column":40},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/shared/calculators/tensors_to_segmentation.js"},{"name":"./constants","loc":{"line":62,"column":24},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/constants.js"},{"name":"./segmenter_utils","loc":{"line":63,"column":32},"parent":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter.js","resolved":"/Users/shedong/Documents/dev/Hanstreamer/public/display/node_modules/@tensorflow-models/body-segmentation/selfie_segmentation_tfjs/segmenter_utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.load = void 0;\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\nvar tf = require(\"@tensorflow/tfjs-core\");\nvar convert_image_to_tensor_1 = require(\"../shared/calculators/convert_image_to_tensor\");\nvar image_utils_1 = require(\"../shared/calculators/image_utils\");\nvar mask_util_1 = require(\"../shared/calculators/mask_util\");\nvar tensors_to_segmentation_1 = require(\"../shared/calculators/tensors_to_segmentation\");\nvar constants = require(\"./constants\");\nvar segmenter_utils_1 = require(\"./segmenter_utils\");\nvar MediaPipeSelfieSegmentationTfjsMask = /** @class */ (function () {\n    function MediaPipeSelfieSegmentationTfjsMask(mask) {\n        this.mask = mask;\n    }\n    MediaPipeSelfieSegmentationTfjsMask.prototype.toCanvasImageSource = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, (0, mask_util_1.toHTMLCanvasElementLossy)(this.mask)];\n            });\n        });\n    };\n    MediaPipeSelfieSegmentationTfjsMask.prototype.toImageData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, (0, mask_util_1.toImageDataLossy)(this.mask)];\n            });\n        });\n    };\n    MediaPipeSelfieSegmentationTfjsMask.prototype.toTensor = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.mask];\n            });\n        });\n    };\n    MediaPipeSelfieSegmentationTfjsMask.prototype.getUnderlyingType = function () {\n        return 'tensor';\n    };\n    return MediaPipeSelfieSegmentationTfjsMask;\n}());\nfunction maskValueToLabel(maskValue) {\n    (0, mask_util_1.assertMaskValue)(maskValue);\n    return 'person';\n}\n/**\n * MediaPipeSelfieSegmentation TFJS segmenter class.\n */\nvar MediaPipeSelfieSegmentationTfjsSegmenter = /** @class */ (function () {\n    function MediaPipeSelfieSegmentationTfjsSegmenter(modelType, model) {\n        this.modelType = modelType;\n        this.model = model;\n    }\n    /**\n     * Segment people found in an image or video frame.\n     *\n     * It returns a single segmentation which contains all the detected people\n     * in the input.\n     *\n     * @param image\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement The input\n     * image to feed through the network.\n     *\n     * @param config Optional.\n     *       flipHorizontal: Optional. Default to false. When image data comes\n     *       from camera, the result has to flip horizontally.\n     *\n     * @return An array of one `Segmentation`.\n     */\n    // TF.js implementation of the mediapipe selfie segmentation pipeline.\n    // ref graph:\n    // https://github.com/google/mediapipe/blob/master/mediapipe/mediapipe/modules/elfie_segmentation/selfie_segmentation_cpu.pbtxt\n    MediaPipeSelfieSegmentationTfjsSegmenter.prototype.segmentPeople = function (image, segmentationConfig) {\n        return __awaiter(this, void 0, void 0, function () {\n            var rgbaMask;\n            var _this = this;\n            return __generator(this, function (_a) {\n                segmentationConfig = (0, segmenter_utils_1.validateSegmentationConfig)(segmentationConfig);\n                if (image == null) {\n                    this.reset();\n                    return [2 /*return*/, []];\n                }\n                rgbaMask = tf.tidy(function () {\n                    // SelfieSegmentationCpu: ImageToTensorCalculator.\n                    // Resizes the input image into a tensor with a dimension desired by the\n                    // model.\n                    var imageValueShifted = (0, convert_image_to_tensor_1.convertImageToTensor)(image, _this.modelType === 'general' ?\n                        constants.SELFIE_SEGMENTATION_IMAGE_TO_TENSOR_GENERAL_CONFIG :\n                        constants.SELFIE_SEGMENTATION_IMAGE_TO_TENSOR_LANDSCAPE_CONFIG).imageTensor;\n                    // SelfieSegmentationCpu: InferenceCalculator\n                    // The model returns a tensor with the following shape:\n                    // [1 (batch), 144, 256] or [1 (batch), 256, 256, 2] depending on\n                    // modelType.\n                    var segmentationTensor = \n                    // Slice activation output only.\n                    tf.slice(_this.model.predict(imageValueShifted), [0, 0, 0, 1], -1);\n                    // SelfieSegmentationCpu: ImagePropertiesCalculator\n                    // Retrieves the size of the input image.\n                    var imageSize = (0, image_utils_1.getImageSize)(image);\n                    // SelfieSegmentationCpu: TensorsToSegmentationCalculator\n                    // Processes the output tensors into a segmentation mask that has the same\n                    // size as the input image into the graph.\n                    var maskImage = (0, tensors_to_segmentation_1.tensorsToSegmentation)(segmentationTensor, constants.SELFIE_SEGMENTATION_TENSORS_TO_SEGMENTATION_CONFIG, imageSize);\n                    // Grayscale to RGBA\n                    // tslint:disable-next-line: no-unnecessary-type-assertion\n                    var mask3D = tf.expandDims(maskImage, 2);\n                    var rgMask = tf.pad(mask3D, [[0, 0], [0, 0], [0, 1]]);\n                    return tf.mirrorPad(rgMask, [[0, 0], [0, 0], [0, 2]], 'symmetric');\n                });\n                return [2 /*return*/, [{\n                            maskValueToLabel: maskValueToLabel,\n                            mask: new MediaPipeSelfieSegmentationTfjsMask(rgbaMask)\n                        }]];\n            });\n        });\n    };\n    MediaPipeSelfieSegmentationTfjsSegmenter.prototype.dispose = function () {\n        this.model.dispose();\n    };\n    MediaPipeSelfieSegmentationTfjsSegmenter.prototype.reset = function () { };\n    return MediaPipeSelfieSegmentationTfjsSegmenter;\n}());\n/**\n * Loads the MediaPipeSelfieSegmentationTfjs model.\n *\n * @param modelConfig ModelConfig object that contains parameters for\n * the MediaPipeSelfieSegmentationTfjs loading process. Please find more details\n * of each parameters in the documentation of the\n * `MediaPipeSelfieSegmentationTfjsModelConfig` interface.\n */\nfunction load(modelConfig) {\n    return __awaiter(this, void 0, void 0, function () {\n        var config, modelFromTFHub, model;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    config = (0, segmenter_utils_1.validateModelConfig)(modelConfig);\n                    modelFromTFHub = typeof config.modelUrl === 'string' &&\n                        (config.modelUrl.indexOf('https://tfhub.dev') > -1);\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl, { fromTFHub: modelFromTFHub })];\n                case 1:\n                    model = _a.sent();\n                    return [2 /*return*/, new MediaPipeSelfieSegmentationTfjsSegmenter(config.modelType, model)];\n            }\n        });\n    });\n}\nexports.load = load;\n"},"sourceMaps":{"js":{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["../../src/selfie_segmentation_tfjs/segmenter.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"d93c2b0d824c128416cf3a2486f53fe3","cacheData":{"env":{}}}